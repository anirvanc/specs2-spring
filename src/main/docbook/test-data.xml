<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="test-data">
    <title>Test data setup Specs2 Spring</title>

    <section>
        <title>Inserting test data</title>
        <para>For a lot of the tests that you will be writing, you will need insert data to support your tests. You have
            several options; you can either:
            <itemizedlist>
                <listitem>
                    <para>Use pre-populated test database,</para>
                </listitem>
                <listitem>
                    <para>Write scripts that will insert the required test data,</para>
                </listitem>
                <listitem>
                    <para>Use your application's <emphasis>repository</emphasis> code to insert the test data.</para>
                </listitem>
            </itemizedlist>

            Now, each approach has its advantages and drawbacks. Using pre-populated database means that each developer
            needs to maintain his or her own copy of the database. In case of writing scripts, we are faced with scripts
            that are disconnected from the rest of our application's code. Finally, using the persistence tier in our
            application in the tests is cumbersome.
        </para>
        <para>Specs2 Spring gives us half-way house that combines the scripts and using the repository tier to insert
            the objects. We would like to combine the script-like approach with manually creating and inserting the
            records. Specs2 Spring comes with <code>BeanTables</code>, a trait that allows you to construct lists of
            objects with their properties written in a convenient tabular form.
            <programlisting language="scala"><![CDATA[
"username" | "firstName" |
"janm"    !! "Jan"       |
"marco"   !! "Marc"
            ]]>
            </programlisting>
            Assuming there is a persistent class <code>User</code>, defined as:
            <programlisting language="scala"><![CDATA[
@Entity
case class User() {
  @Id
  @GeneratedValue
  @BeanProperty
  var id: Long = _
  @Version
  @BeanProperty
  var version: Int = _
  @BeanProperty
  var username: String = _
  @BeanProperty
  var firstName: String = _
  @BeanProperty
  var lastName: String = _

}]]>
            </programlisting>
            We would now expect that this table somehow creates two <code>User</code> instances whose <code>username</code>
            and <code>firstName</code> properties are set to the values in the rows of the table. We now need to be able to
            obtain the created objects or--as we'll see later--insert them into some underlying persistence mechanism.
            The "table" object that <code>BeanTables</code> creates contains functions <code>|&gt;</code> and
            <code>|&lt;</code>. Their names hint at the direction in which the objects will flow.
        </para>
        <para>Let's start with obtaining the objects into a <code>List</code>. The <code>|&lt;</code> function sends
            the rows of the constructed objects towards the left and top; that is, towards the variable definition.
            <programlisting language="scala"><![CDATA[
class SpecificationSpec extends Specification with BeanTables {

  "user objects using BeanTables:" in {
    val inferredUsers: List[User] =
      "username" | "firstName" |
      "janm"    !! "Jan"       |
      "marco"   !! "Marc"      |<

    val typedUsers =
      "username" | "firstName" |
      "janm"    !! "Jan"       |
      "marco"   !! "Marc"      |<classOf[User]

    // assert something about typedUsers and inferredUsers
  }
}
            ]]>
            </programlisting>
            The two variables, <code>inferredUsers</code> and <code>typedUsers</code> show the application of the <code>|&gt;</code>
            function. In the first case, the function's type is inferred from the type of the <code>inferredUsers</code> variable.
            In the second case, we supply the type of the elements in the list (and we don't need to explicitly specify
            the type of the <code>List</code>). Once you have the instances from the table, you can then use them as any
            other instance in your code.
        </para>
        <para>In a lot of cases, though, you will want to insert the data using some underlying persistence mechanism. To
            do that, you need to use the <code>|&gt;</code> functions of the table. The <code>|&gt;</code> function
            expects a function that takes some type <code>B</code> and returns <code>Result</code>. Specs2 Spring includes
            traits with functions that return just the function that <code>|&gt;</code> expects. For example, you can
            use the <code>insert</code> function from the <code>HibernateDataAccess</code> trait.
            <programlisting language="scala"><![CDATA[
class SpecificationSpec extends Specification with BeanTables with HibernateDataAccess {

  "user objects using BeanTables:" in {
    val sessionFactory = make-hibernate-SessionFactory()

    "username" | "firstName" |
    "janm"    !! "Jan"       |
    "marco"   !! "Marc"      |> insert[User](sessionFactory)

    // assert something about the users in the DB
  }
}
            ]]>
            </programlisting>
            We will explore the details of the traits with functions that can be used in the <code>|&gt;</code> function
            in the table.
        </para>
        <section>
            <title>HibernateDataAccess</title>
            <para>The HibernateDataAccess trait includes functions <code>insert</code> and <code>deleteAll</code>,
                functions that can be used with the <code>BeanTable</code>'s <code>|&gt;</code> functions.
            </para>
            <para>We have the <code>insert[T](implicit sessionFactory: SessionFactory): (T => Result)</code> and
                <code>insert[T, R](f: T => R)(implicit sessionFactory: SessionFactory): (T => Result)</code>. The first
                <code>insert</code> returns a function that takes an instance <code>T</code> and performs the
                Hibernate <code>saveOrUpdate</code> operation. The second <code>insert</code> function takes a function
                that is applied to every instance <code>T</code> before it is inserted. Both functions accept the implicit
                parameter of type <code>SessionFactory</code>.
            </para>
            <para>The usage of the <code>insert[T](implicit sessionFactory: SessionFactory): (T => Result)</code> requires
                the <code>SessionFactory</code>. In a typical Spring Framework application, the <code>SessionFactory</code>
                is usually a Spring bean. Therefore, it can be injected into the specification.
                <programlisting language="scala"><![CDATA[
@ContextConfiguration(Array("classpath*:/META-INF/spring/module-context.xml"))
class SpecificationSpec extends Specification
  with BeanTables with HibernateDataAccess {

  @Autowired implicit var sessionFactory: SessionFactory = _
  @Autowired var springComponent: SpringComponent = _

  "springComponent must:" in {
    "username" | "firstName" |
    "janm"    !! "Jan"       |
    "marco"   !! "Marc"      |> insert[User]

    springComponent.findAll[User].size() must_== (2)
  }
}
                ]]>
                </programlisting>

            </para>
        </section>
    </section>

</chapter>