<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
		"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="whatsnext">
	<title>What's next?</title>

	<section>
		<title>What is coming to Specs2 Spring</title>
		<para>The Specs2 Spring core is stable--or at least the API is stable. You can start writing your tests
		in Specs2 Scala now and the investment will not be ruined by some strange API changes. What may--and probably will--change
		are the mechanics of how the <interfacename>ApplicationContext</interfacename> is constructed, how we propagate
		transactional behaviour though the examples and many more.</para>

		<para>Further work will simply bring more features to allow you to easily test:
			<itemizedlist>
				<listitem>
					<para>DispatcherServlet-based Spring applications</para>
				</listitem>
				<listitem>
					<para>MessageServlet-based Spring applications</para>
				</listitem>
				<listitem>
					<para>Full web UI roundtrip testing, including DOM manipulation and JS evaluation</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>The following code snippet <emphasis>already works!</emphasis>
			<programlisting language="java"><![CDATA[
@WebContextConfiguration(
  webContextLocations = Array("/WEB-INF/sw-servlet.xml"),
  contextLocations = Array("classpath*:/META-INF/spring/module-context.xml"))
@Transactional
class IndexControllerTest extends Specification {

  @Autowired
  var managementService: ManagementService = _

  "web roundtrip test" in {
    this.managementService.findAll(classOf[User]).isEmpty must beTrue

    Xhtml(post)("/users.html", Map("username" -> "aaaa", "fullName" -> "Jan")

    val wo = Xhtml(get)("/users/1.html")
    wo.model(classOf[User]).getFullName must_== ("Jan")
    wo.model(classOf[User]).getUsername must_== ("aaaa")

    (wo!) >>! ("#username") must_== ("aaaa")
  }

}]]>
			</programlisting>
			Notice that the API (i.e. the annotations) remains fixed, what might change are the methods of the
			<classname>WebObject</classname> returned, in this example, from the <code>post</code> and <code>get</code>
			methods.
		</para>
	</section>
</chapter>
