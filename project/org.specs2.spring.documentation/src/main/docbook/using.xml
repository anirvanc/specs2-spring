<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="using">
	<title>Using Specs2 Spring Specification</title>

	<section>
		<title>Using Specs2 Spring</title>
		<para>To configure the Spring <interfacename>ApplicationContext</interfacename>, you
			need to use the <code>ContextConfiguration</code> annotation on a subclass of the
			<classname>org.specs2.spring.Specification</classname>. The code in the
			<classname>org.specs2.spring.Specification</classname> will build the
			<interfacename>ApplicationContext</interfacename> by instantiating the
			<classname>ClassPathXmlApplicationContext</classname> using the configuration
			files specified in the <code>values</code> property of the <code>ContextConfiguration</code>.
		</para>

		<para>Once the <classname>org.specs2.spring.Specification</classname> is done constructing
			the <interfacename>ApplicationContext</interfacename>, it will autowire the variables
			of the test using the beans in the context. (Obviously, you have to use the
			<code>Autowired</code> annotation on the variables that you want to have autowired.) Once
			the Spring <interfacename>ApplicationContext</interfacename> is ready and the variables
			autowired, you can use them in the bodies of the examples.</para>
			
		<para>In addition to setting up properly configured Spring <interfacename>ApplicationContext</interfacename>,
			Specs2 Spring sets up the JNDI environment for the test. This allows you to have the same Spring
			context configuration files, regardless of whether you are running tests, trying out the application
			on your own machine, deploying the application to pre-production servers or even running 
			your application live.</para>
			
		<para>In this section, you will find out how to configure your Spring <interfacename>ApplicationContext</interfacename>
			and how to configure the JNDI environment for your tests. Finally, we will discuss using running the
			examples in your specifications in their own transactions and controlling the behaviour of those
			transactions</para>
		<!--
		<section>
			<title>Configuring the Spring ApplicationContext</title>
			
			<para>To create the Spring <interfacename>ApplicationContext</interfacename> for the test,
			it looks for the <interfacename>ContextConfiguration</interfacename> annotation on the test.
			<remark>Or the <interfacename>ContextConfiguration</interfacename> annotation on any annotation
			that the test is annotated with. See <xref linkend="annotated-annotation"/></remark>
			</para>

		</section>
		-->
		<section>
			<title>Understanding the Specs2 setup annotations</title>

			<para id="setup-annotations">The annotations on a Specs2 Spring test control &amp; define how the Spring <interfacename>ApplicationContext</interfacename>
			is constructed, define the elements of the JNDI environment required for the test. (See <xref linkend="behavioural-annotations"/>).
			The set-up annotations are:
			<table>
				<title>Specs2 Spring annotations</title>
				<tgroup cols="2">
					<colspec colwidth="6cm"/>
					<thead>
						<row>
							<entry>Annotation</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><code>ContextConfiguration</code></entry>
							<entry>Drives the way in which the Specs2 Spring extension will create the
							<classname>ClassPathXmlApplicationContext</classname></entry>
						</row>
						<row>
							<entry><code>DataSource</code></entry>
							<entry>Adds the <code>javax.sql.DataSource</code> to the environment</entry>
						</row>
						<row>
							<entry><code>TransactionManager</code></entry>
							<entry>Adds the <code>javax.transaction.UserTransaction</code> to the environment</entry>
						</row>
						<row>
							<entry><code>Jms</code></entry>
							<entry>Adds the <code>javax.jms.ConnectionFactory</code> to the environment</entry>
						</row>
						<row>
							<entry><code>JmsTopic</code></entry>
							<entry>Adds the <code>javax.jms.Topic</code> to the environment</entry>
						</row>
						<row>
							<entry><code>JmsQueue</code></entry>
							<entry>Adds the <code>javax.jms.Queue</code> to the environment</entry>
						</row>
						<row>
							<entry><code>MailSession</code></entry>
							<entry>Adds the <code>javax.mail.Session</code> to the environment</entry>
						</row>
						<row>
							<entry><code>WorkManager</code></entry>
							<entry>Adds the <code>commonj.work.WorkManager</code> or <code>javax.spi.resource.work.WorkManager</code> to the environment</entry>
						</row>
						<row>
							<entry><code>Transactional</code></entry>
							<entry>Indicates that every example should run in its own transaction, the <code>TransactionConfiguration</code> annotation
							refines the transactional behaviour further</entry>
						</row>
						<row>
							<entry><code>TransactionConfiguration</code></entry>
							<entry>Tunes the transactional semantics that is applied to the transactional examples</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			</para>

			<para>But there is one more annotation, <code>Jndi</code>, which aggregates all other annotations; moreover,
			it lets you specify <emphasis>multiple</emphasis> <code>DataSource</code>s, <code>Queue</code>s, <code>Topic</code>s, ....
			(Suppose you needed two <code>DataSource</code>s, you must use the <code>Jndi</code> annotation, you cannot annotate
			your specification with two <code>DataSource</code> annotations.) Its usage is straight-forward:
			<programlisting language="java"><![CDATA[
@Jndi(
	dataSources = {
		@DataSource(name = "java:comp/env/jdbc/test",
			driverClass = JDBCDriver.class, url = "jdbc:hsqldb:mem:test"),
		@DataSource(name = "java:comp/env/jdbc/external",
			driverClass = JDBCDriver.class, url = "jdbc:hsqldb:mem:external")
	},
	mailSessions = @MailSession(name = "java:comp/env/mail/foo"),
	transactionManager =
		@TransactionManager(name = "java:comp/TransactionManager"),
	jms = @Jms(
		connectionFactoryName = "java:comp/env/jms/connectionFactory",
		queues = {
		  @JmsQueue(name = "java:comp/env/jms/requests"),
		  @JmsQueue(name = "java:comp/env/jms/responses")},
		topics = {
		  @JmsTopic(name = "java:comp/env/jms/cacheFlush"),
		  @JmsTopic(name = "java:comp/env/jms/ruleUpdate")}
	),
	workManagers = @WorkManager(name = "java:comp/env/work/WorkManager",
								kind = WorkManager.Kind.CommonJ)
)
@Transactional
@TransactionConfiguration(defaultRollback = true)
@ContextConfiguration("classpath*:/META-INF/spring/module-context.xml")
public class SomeTest ... {
}
			]]>
			</programlisting>
			</para>

			<para id="annotated-annotation">In Java, we can use (for example) the <code>DataSource</code> annotation as the element of the
			<code>dataSources</code> property of the <code>Jndi</code> annotation. Unfortunately,
			we have used the annotation on a Java class. You cannot use annotations as elements of the properties
			of an annotation in Scala. If you want to use the <code>Jndi</code> annotation in your Scala code, you have to
			create an annotation and <emphasis>annotate the custom annotation with the <code>Jndi</code> annotation</emphasis>.
			Typically, you will also include the <code>ContextConfiguration</code>, <code>Transactional</code> and
			<code>TransactionDefinition</code> on the custom annotation and use the custom annotation throughout
			your Specs2 code.
			<programlisting language="java"><![CDATA[
@Jndi(
	dataSources = {
		@DataSource(name = "java:comp/env/jdbc/test",
			driverClass = JDBCDriver.class, url = "jdbc:hsqldb:mem:test"),
		@DataSource(name = "java:comp/env/jdbc/external",
			driverClass = JDBCDriver.class, url = "jdbc:hsqldb:mem:external")
	},
	mailSessions = @MailSession(name = "java:comp/env/mail/foo"),
	transactionManager =
		@TransactionManager(name = "java:comp/TransactionManager"),
	jms = @Jms(
		connectionFactoryName = "java:comp/env/jms/connectionFactory",
		queues = {
		  @JmsQueue(name = "java:comp/env/jms/requests"),
		  @JmsQueue(name = "java:comp/env/jms/responses")},
		topics = {
		  @JmsTopic(name = "java:comp/env/jms/cacheFlush"),
		  @JmsTopic(name = "java:comp/env/jms/ruleUpdate")}
	),
	workManagers = @WorkManager(name = "java:comp/env/work/WorkManager",
								kind = WorkManager.Kind.CommonJ)
)
@Transactional
@TransactionConfiguration(defaultRollback = true)
@ContextConfiguration("classpath*:/META-INF/spring/module-context.xml")
@Retention(RetentionPolicy.RUNTIME)
public @interface IntegrationTest {
}]]>
				</programlisting>
			You now have the <code>IntegrationTest</code> annotation (in Java), which you can use on your Scala
			specifications:
				<programlisting language="java"><![CDATA[
import org.specs2.spring.Specification
...

@IntegrationTest
class SomeComponentSpec extends Specification {
  ...
}]]>
				</programlisting>
			</para>

			<section>
				<title>The ContextConfiguration annotation</title>
				<para>The <code>ContextConfiguration</code> annotation is the core of the Specs2 Spring extension. This
				annotation configures how Specs2 Spring is going to construct the Spring <interfacename>ApplicationContext</interfacename>.
				Version 1.0 of Specs2 Scala examines only the <code>value</code> property; it ignores the <code>locations</code>,
				<code>inheritLocations</code> and <code>loader</code> properties that you may be used to in your
				Spring testing using the <code>spring-test</code> artifact.</para>

				<para>The <code>String[] value</code> property defines the array of locations the context files for the
				<classname>ClassPathXmlApplicationContext</classname> to use. For example, writing
				<code>@ContextConfiguration(Array("classpath*:/a.xml", "classpath*:/b.xml"))</code> will instruct
				the Specs2 Spring extension to create the Spring <interfacename>ApplicationContext</interfacename> by (in effect)
				calling <code>new ClassPathXmlApplicationContext(new String[]{"classpath*:/a.xml", "classpath*:/b.xml"})</code>.</para>

				<para>Once the <interfacename>ApplicationContext</interfacename> is constructed, the Specs2 Scala extension
				will inject the configured dependencies into the specification. Just like ordinary Java Spring code, you
				need to instruct the Specs2 Spring to perform the DI--in other words, use the <code>Autowired</code> annotation
				on fields (<code>var</code>s in Scala) or on the setters. <remark>For completeness, you may not use
				constructor injection.</remark>. A complete example of Specs2 Spring specification class that uses
				the <code>ContextConfiguration</code> annotation could be:
					<programlisting language="java"><![CDATA[
import org.specs2.spring.Specification
...

@ContextConfiguration(
  Array("classpath*:/META-INF/spring/module-context.xml"))
class SomeComponentSpec extends Specification {
  @Autowired var someComponent: SomeComponent = _
  @Autowired var hibernateTemplate: HibernateTemplate = _

  "specification" in {
    ...
    success
  }
}]]>
					</programlisting>
				Notice in particular the <code>import org.specs2.spring.Specification</code>, application of the
				<code>@ContextConfiguration(Array("classpath*:/META-INF/spring/module-context.xml"))</code> and the
				two variables marked with the <code>Autowired</code> annotation. When you run the test, by the time
				the code of your examples (the <code>"specification" in { ... }</code>) runs, the variables will have
				been injected.
				</para>
			</section>

			<section>
				<title>The DataSource annotation</title>
				<para>While the <code>ContextConfiguration</code> annotation drives the setup of the Spring
				<interfacename>ApplicationContext</interfacename>, the JNDI annotations inject the appropriate
				values to the environment for the test. The first JNDI annotation is <code>DataSource</code>.</para>

				<para>The <code>DataSource</code> annotations adds the <interfacename>javax.sql.DataSource</interfacename>
				object to JNDI; the properties of the annotations specify what JDBC driver to use, set the RDBMS connection
				parameters and finally define the name for the <interfacename>javax.sql.DataSource</interfacename> in the
				environment. If you include the <code>TransactionManager</code>, the <interfacename>DataSource</interfacename>
				will be an XA (two-phase commit) one; otherwise, it will be the ordinary one.</para>

				<para>The following code snippet shows typical configuration of the <code>DataSource</code> annotaiton:
					<programlisting language="java"><![CDATA[
@DataSource(
	name = "java:comp/env/jdbc/test",
	driverClass = JDBCDriver.class,
	url = "jdbc:hsqldb:mem:test",
	username = "sa",
	password = "")]]>
					</programlisting>
				The code listing shows all properties of the <code>DataSource</code> annotation.
				</para>
				<table>
					<title>Properties of the DataSource annotation</title>
					<tgroup cols="2">
						<colspec colwidth="4cm"/>
						<thead>
							<row>
								<entry>Property</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><code>name</code></entry>
								<entry>The name in JNDI environment that the created <interfacename>javax.sql.DataSource</interfacename>
								should be registered under. This name must match the <code>jndi-name</code> of the <code>jee:jndi-lookup</code>
								element of the Spring configuration file.</entry>
							</row>
							<row>
								<entry><code>driverClass</code></entry>
								<entry>The class of the JDBC driver (must be subtype of <interfacename>java.sql.Driver</interfacename></entry>
							</row>
							<row>
								<entry><code>url</code></entry>
								<entry>The JDBC connection URL; this string will vary according to the used JDBC driver.</entry>
							</row>
							<row>
								<entry><code>username</code></entry>
								<entry>The username to be used to create the connection to the RDBMS.</entry>
							</row>
							<row>
								<entry><code>password</code></entry>
								<entry>The password to be used to create the connection to the RDBMS.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>The complete example that ties the <code>DataSource</code> annotation and the Spring
				configuration file is simply:
					<programlisting language="java"><![CDATA[
import org.specs2.spring.Specification
import org.hsqldb.jdbc.JDBCDriver
...

@DataSource(
	name = "java:comp/env/jdbc/test",
	driverClass = classOf[JDBCDriver],
	url = "jdbc:hsqldb:mem:test",
	username = "sa",
	password = "")
@ContextConfiguration(
	Array("classpath*:/META-INF/spring/module-context.xml"))
class SomeSpecification extends Specification {
	...
}]]>
					</programlisting>
					The annotation on the specification class instructs the Specs2 Spring to add the <interfacename>javax.sql.DataSource</interfacename>
					(that connects to HSQL DB using the <code>org.hsqldb.jdbc.JDBCDriver</code>, URL <code>jdbc:hsqldb:mem:test</code> and
					credentials <code>sa/</code>) <emphasis>before</emphasis> constructing the Spring <interfacename>ApplicationContext</interfacename>
					using the configuration files located at <code>/META-INF/spring/module-context.xml</code>. To consume
					the registered JNDI entry in one of the context files, simply use the <code>jee:jndi-lookup</code> element.
					<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee.xsd">

	<context:component-scan base-package="org.specs2.springexample"/>
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/test"
		expected-type="javax.sql.DataSource"/>

</beans>]]>
					</programlisting>
					In the body of the specification, you can now request autowiring of the <code>dataSource</code> bean
					(in addition to any beans that may be discovered by the <code>context:component-scan</code>).
				</para>
			</section>
			
			<section>
				<title>The TransactionManager annotation</title>
				<para>It is typical to use some kind of transactional semantics in Spring applications. Spring Framework
				abstracts out the details of how it is going to achieve this transactional behaviour by defining the
				<interfacename>PlatformTransactionManager</interfacename> interface and providing several implementations
				of the interface. There are, to name a few, <classname>DataSourceTransactionManager</classname>,
				<classname>JpaTransactionManager</classname>, <classname>HibernateTransactionManager</classname> and many
				other <emphasis>local</emphasis> transaction managers.</para>
				<para>Imagine now that you would like the transaction to span across multiple transactional resources,
				for example two RDBMSs, JMS queues and topics. In that scenario, these local transaction managers will not
				work: being <emphasis>local</emphasis>, they can only manage the transactional semantics on a single
				resource. The only transaction manager that can apply transactional semantics to <emphasis>multiple</emphasis>
				resources is the <classname>JtaTransactionManager</classname>. As the name suggests, the
				<classname>JtaTransactionManager</classname> is the implementation of the <interfacename>PlatformTransactionManager</interfacename>
				that uses the Java transaction API-compliant manager. The manager is the implementation of the
				<interfacename>javax.transaction.TransactionManager</interfacename> or <interfacename>javax.transaction.UserTransaction</interfacename>.
				The Specs2 Spring includes support for the global transaction manager; if you use the
				<code>TransactionManager</code> annotation, Specs2 Spring will also create all <code>DataSource</code>s
				that are aware of the global transaction manager.
				</para>
				<para>The <code>TransactionManager</code> annotation includes only one property, <code>name</code>.
					<table>
						<title>Properties of the TransactionManager annotation</title>
						<tgroup cols="2">
							<colspec colwidth="4cm"/>
							<thead>
								<row>
									<entry>Property</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><code>name</code></entry>
									<entry>The name in JNDI environment that the created <interfacename>javax.transaction.UserTransaction</interfacename>
									should be registered under. Typically, the value of this property is <code>java:comp/TransactionManager</code></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</para>
				<para>Spring's <code>&lt;tx:jta-transaction-manager /&gt;</code> automatically scans the JNDI environment
				for the JTA elements under <code>java:comp/TransactionManager</code> name. This makes typical usage
				of this annotation very simple:
					<programlisting language="java"><![CDATA[
import org.specs2.spring.Specification
import org.hsqldb.jdbc.JDBCDriver
...

@DataSource(
	name = "java:comp/env/jdbc/test",
	driverClass = classOf[JDBCDriver],
	url = "jdbc:hsqldb:mem:test",
	username = "sa",
	password = "")
@TransactionManager(name = "java:comp/TransactionManager")
@ContextConfiguration(
	Array("classpath*:/META-INF/spring/module-context.xml"))
class SomeSpecification extends Specification {
	...
}]]>
					</programlisting>
					The annotation on the specification class instructs the Specs2 Spring to add the <interfacename>javax.transaction.UserTransaction</interfacename>
					to the environment. To consume the registered JNDI entry in one of the context files, simply use the
					<code>tx:jta-transaction-manager</code> element.
					<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee.xsd">

	<context:component-scan base-package="org.specs2.springexample"/>
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/test"
		expected-type="javax.sql.DataSource"/>
	<tx:jta-transaction-manager />
	<tx:annotation-driven />

</beans>]]>
					</programlisting>
					In the body of the specification, you now have the <code>transactionManager</code> bean that has been
					obtained by looking up the <code>java:comp/TransactionManager</code> name. Typically, you will
					also need to include the <code>tx:annotation-driven</code> element to weave in the transactional
					advices, allowing you to use the <code>Transactional</code> annotation on types and methods.
					(And, ideally, you will use load- or compile-time weaving; tuning the <code>tx:annotation-driven</code>
					element by specifying the mode attribute: <code>&lt;tx:annotation-driven mode="aspectj"/&gt;</code>.)
				</para>
			</section>
			<section>
				<title>JMS annotations</title>
				<para>The JMS infrastructure combines multiple queues and topics under a connection factory. The
				<interfacename>javax.jms.ConnectionFactory</interfacename> is the main "access point" to the
				JMS infrastructure. Spring applications make use of the connection factory to register code
				to be called whenever a message appears on a queue; the code of JMS-based Spring applications
				typically also needs to have access to the queues and topics.</para>
				<para>The <interfacename>javax.jms.ConnectionFactory</interfacename>, <interfacename>javax.jms.Queue</interfacename>
				and <interfacename>javax.jms.Topic</interfacename> objects are usually looked up from JNDI.</para>
				<para>The basic setup of the JMS infrastructure therefore requires that you use the <code>Jms</code> annotation,
				specifying the name for the connection factory and either a <code>JmsTopic</code> and/or <code>JmsQueue</code> that
				define the JMS topic and queue, respectively. All three annotations only require you to set the the name in the
				environment (and which must match the <code>jndi-name</code> attribute of the <code>jee:jndi-lookup</code> element).</para>
				<para>The following code snippet shows typical configuration of the JMS annotaitons:
					<programlisting language="java"><![CDATA[
@Jms(connectionFactoryName = "java:comp/env/jms/connectionFactory")
@JmsQueue(name = "java:comp/env/jms/requests")
@JmsTopic(name = "java:comp/env/jms/cacheFlush")
class SomeSpecification extends Specification {
  ...
}]]>
					</programlisting>
				Exploring the properties of each annotation further, we have:
					<table>
						<title>Properties of the JMS annotation</title>
						<tgroup cols="2">
							<colspec colwidth="6cm"/>
							<thead>
								<row>
									<entry>Property</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><code>connectionFactoryName</code></entry>
									<entry>The name in JNDI environment that the created <interfacename>javax.jms.ConnectionFactory</interfacename>
									should be registered under.</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<table>
						<title>Properties of the JMS queue</title>
						<tgroup cols="2">
							<colspec colwidth="4cm"/>
							<thead>
								<row>
									<entry>Property</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><code>name</code></entry>
									<entry>The name in JNDI environment that the created <interfacename>javax.jms.Queue</interfacename>
									should be registered under.</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<table>
						<title>Properties of the JmsTopic annotation</title>
						<tgroup cols="2">
							<colspec colwidth="4cm"/>
							<thead>
								<row>
									<entry>Property</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><code>name</code></entry>
									<entry>The name in JNDI environment that the created <interfacename>javax.jms.Topic</interfacename>
									should be registered under.</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</para>
				<para>Expanding the previous examples with the JMS annotations, we now have:
					<programlisting language="java"><![CDATA[
import org.specs2.spring.Specification
import org.hsqldb.jdbc.JDBCDriver
...

@DataSource(
	name = "java:comp/env/jdbc/test",
	driverClass = classOf[JDBCDriver],
	url = "jdbc:hsqldb:mem:test",
	username = "sa",
	password = "")
@Jms(connectionFactoryName = "java:comp/env/jms/connectionFactory")
@JmsQueue(name = "java:comp/env/jms/requests")
@JmsTopic(name = "java:comp/env/jms/cacheFlush")
@ContextConfiguration(
	Array("classpath*:/META-INF/spring/module-context.xml"))
class SomeSpecification extends Specification {
	...
}]]>
				</programlisting>
				In addition to the RDBMS and the global transaction manager, we define a JMS infrastructure and one
				queue and one topic. We consume the newly defined elements in the Spring configuration file
				using the <code>jee:jndi-lookup</code> element.
					<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee.xsd">

	<context:component-scan base-package="org.specs2.springexample"/>
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/test"
		expected-type="javax.sql.DataSource"/>
	<tx:jta-transaction-manager />
	<tx:annotation-driven />
	<jee:jndi-lookup id="connectionFactory"
		jndi-name="java:comp/env/jms/connectionFactory"
		expected-type="javax.jms.ConnectionFactory"/>
	<jee:jndi-lookup id="requests"
		jndi-name="java:comp/env/jms/requests"
		expected-type="javax.jms.Queue"/>
	<jee:jndi-lookup id="cacheFlush"
		jndi-name="java:comp/env/jms/cacheFlush"
		expected-type="javax.jms.Topic"/>

</beans>]]>
					</programlisting>
					Note that in the sample code, the global transaction manager (registered using the
					<code>TransactionManager</code> annotation) can manage transactions over all transactional resources;
					in this case, the RDBMS <emphasis>and</emphasis> the JMS queue or topic.
				</para>
				<para>Most applications require more than one queue or topic; some applications even require
				more than one connection factory. In that situation, you must use the <emphasis>annotated annotation</emphasis>
				approach we already demonstrated (see <xref linkend="annotated-annotation"/> or **advanced-xref**).</para>
			</section>
			<section>
				<title>The MailSession annotation</title>
				<para>If you are sending e-mails from your application, you will need the <classname>javax.mail.Session</classname>, which
					allows you to construct <classname>javax.mail.Message</classname> (including the complex multipart messages,
					deal with attachments and many other e-mail tasks). Just like all other JNDI annotations, you need to
					specify the name for the entry in JNDI and configure the remaining properties of the Javamail session.
				</para>
				<para>The following code snippet shows typical configuration of the <code>MailSession</code> annotaiton:
					<programlisting language="java"><![CDATA[
@MailSession(
	name = "java:comp/env/mail/foo",
	properties = Array("mail.smtp.host=localhost", "mail.mime.charset=UTF-8"))
]]>
					</programlisting>
					Exploring the properties of the annotation further, we have:
					<table>
						<title>Properties of the MailSession annotation</title>
						<tgroup cols="2">
							<colspec colwidth="4cm"/>
							<thead>
								<row>
									<entry>Property</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><code>name</code></entry>
									<entry>The name in JNDI environment that the created <classname>javax.mail.Session</classname>
									should be registered under.</entry>
								</row>
								<row>
									<entry><code>properties</code></entry>
									<entry>The array of <code>String</code>s that represent the Javamail properties, in form of
									<emphasis>property-key</emphasis>=<emphasis>property-value</emphasis>. For example, if you wish
									to specify the <code>mail.smtp.host</code> to <code>localhost</code> and <code>mail.mime.charset</code>
									to <code>UTF-8</code>, you write <code>properties = Array("mail.smtp.host=localhost", "mail.mime.charset=UTF-8")</code></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</para>
				<para>To consume the <classname>javax.mail.Session</classname> in your Spring application, use the
				familiar <code>jee:jndi-lookup</code> element and make sure that the value of the <code>jndi-name</code>
				attribute matches the value of the <code>name</code> property of the <code>MailSession</code> annotation.</para>
			</section>
			<section>
				<title>The WorkManager annotation</title>
				<para>Finally, some applications use one of the two common <interfacename>WorkManager</interfacename> implementations
					to submit work to [a pool of] threads. Typically, the application server maintains and monitors the <interfacename>WorkManager</interfacename>
					instance. The application servers allow the administrators to configure the threads that should become
					parts of the <interfacename>WorkManager</interfacename> instances. Finally, the application servers usually
					then report on the load of the <interfacename>WorkManager</interfacename>. All that is left to us is
					to consume the <interfacename>WorkManager</interfacename> and use it in our application.
					<remark>Having the application server maintain the <interfacename>WorkManager</interfacename> instances
					is far better approach than creating your own thread pools within your application.</remark>
				</para>
				<para>To configure the <interfacename>WorkManager</interfacename>, all you need to specify is the JNDI name and
					set the remaining properties:
					<programlisting language="java"><![CDATA[
@WorkManager(name = "java:comp/env/work/WorkManager",
	kind = WorkManager.Kind.CommonJ,
	maximumThreads = 5,
	minimumThreads = 3)
]]>
					</programlisting>
					Exploring the properties of the annotation further, we have:
					<table>
						<title>Properties of the WorkManager annotation</title>
						<tgroup cols="2">
							<colspec colwidth="4cm"/>
							<thead>
								<row>
									<entry>Property</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><code>name</code></entry>
									<entry>The name in JNDI environment that the created <classname>javax.mail.Session</classname>
									should be registered under.</entry>
								</row>
								<row>
									<entry><code>kind</code></entry>
									<entry>Defines the kind of the created <interfacename>WorkManager</interfacename> instance.
										If the value is <code>WorkManager.Kind.CommonJ</code>, then the instance will implement the
										the <interfacename>commonj.work.WorkManager</interfacename>.
										If the value is <code>WorkManager.Kind.Javax</code>, then the instance will implement the
										<interfacename>javax.spi.resource.work.WorkManager</interfacename>.</entry>
								</row>
								<row>
									<entry><code>maximumThreads</code></entry>
									<entry>The maximum number of threads the created work manager should allow to be created.
									Must be greater than 1 and greater than <code>minimumThreads</code>.</entry>
								</row>
								<row>
									<entry><code>minimumThreads</code></entry>
									<entry>The minimum number of threads the created work manager should create.
									Must be greater than 0 and smaller than <code>minimumThreads</code>.</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</para>
				<para>To consume the work manager in your Spring application, use the familiar <code>jee:jndi-lookup</code>
				element and make sure that the value of the <code>jndi-name</code> attribute matches the value of the
				<code>name</code> property of the <code>WorkManager</code> annotation.</para>
			</section>
		</section>
		<section>
			<title>Understanding the Specs2 behavioural annotations</title>

			<para id="behavioural-annotations">The annotations on a Specs2 Spring behavioural annotations control the runtime of the examples. The behaviour
				defines the transactional semantics that will be applied to the examples. The transactional example
				behavioural support needs to have access to the <interfacename>PlatformTransactionManager</interfacename> bean.
				This <interfacename>PlatformTransactionManager</interfacename> can be any of its implementations,
				even the local one, if it is appropriate for your code. Typically, though, you will use the <code>TransactionManager</code>
				annotation together with the <code>tx:jta-transaction-manager</code> element, which exposes the
				transaction manager that the Specs2 Spring will use to apply the transactional behaviour to the examples.
				(See <xref linkend="setup-annotations"/>).
			<table>
				<title>Specs2 Spring behavioural annotations</title>
				<tgroup cols="2">
					<colspec colwidth="6cm"/>
					<thead>
						<row>
							<entry>Annotation</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><code>Transactional</code></entry>
							<entry>Indicates that every example should run in its own transaction, the <code>TransactionConfiguration</code> annotation
							refines the transactional behaviour further</entry>
						</row>
						<row>
							<entry><code>TransactionConfiguration</code></entry>
							<entry>Tunes the transactional semantics that is applied to the transactional examples</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			When you annotate your test class with the <code>Transactional</code> annotation, every example will run
			in its own transaction and the transaction will be rolled back automatically when the example finishes. You
			can tune whether the transaction rolls back or commits by using the <code>defaultRollback</code> property
			of the <code>TransactionConfiguration</code> annotation. If <code>defaultRollback</code> is <code>false</code>,
			the transaction will <emphasis>commit</emphasis> when the example finishes; if the value is <code>false</code>
			(the default), the transaction will roll back.
			</para>
		</section>
	</section>

</chapter>